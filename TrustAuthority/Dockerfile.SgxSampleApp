# Use the official Ubuntu base image
ARG UBUNTU_VERSION
FROM ubuntu:$UBUNTU_VERSION

# Set DEBIAN_FRONTEND to non-interactive
ENV DEBIAN_FRONTEND=noninteractive

# Update the package index and install essential packages
RUN apt-get update && \
    apt-get install -y \
    curl \
    git \
    openjdk-17-jdk

# Set up environment variables for Java
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=$PATH:$JAVA_HOME/bin

# Install Maven
ARG MAVEN_VERSION
ENV MAVEN_VERSION=$MAVEN_VERSION
ENV MAVEN_HOME=/opt/maven

RUN curl -fsSL https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz | tar xzf - -C /opt/ \
    && ln -s /opt/apache-maven-${MAVEN_VERSION} /opt/maven \
    && ln -s /opt/maven/bin/mvn /usr/local/bin

# Print Maven and Java versions to verify installation
RUN java -version
RUN mvn -v

# Set the working directory in the container
WORKDIR /app

# Set Maven proxy settings
ARG MAVEN_PROXY_HOST
ARG MAVEN_PROXY_PORT
ARG MAVEN_PROXY_HOST=$MAVEN_PROXY_HOST
ARG MAVEN_PROXY_PORT=$MAVEN_PROXY_PORT

# Create /root/.m2/settings.xml file with proxy settings added
RUN mkdir -p /root/.m2 && \
    echo "<settings><proxies><proxy><id>example-proxy</id><active>true</active><protocol>http</protocol><host>${MAVEN_PROXY_HOST}</host><port>${MAVEN_PROXY_PORT}</port></proxy></proxies></settings>" > /root/.m2/settings.xml

# Installing SGX sdk essentials
RUN apt-get update; \
    apt-get upgrade -y; \
    apt-get autoremove -y; \
    apt-get install -y gnupg wget make

# Installing SGX sdk
RUN echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu focal main' > /etc/apt/sources.list.d/intel-sgx.list
RUN wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add -

# Fetch intel-sgx-deb.key
RUN curl https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key -o /tmp/intel-sgx-deb.key; \
    apt-key add /tmp/intel-sgx-deb.key; \
    rm /tmp/intel-sgx-deb.key

# Install packages from intel-sgx.list
RUN apt-get update 
RUN apt-get update && apt-get install -y --no-install-recommends build-essential

# Installing Linux SGX sdk
ARG DCAP_VERSION
ARG PSW_VERSION
WORKDIR /opt/intel
RUN wget -q https://download.01.org/intel-sgx/sgx-linux/2.22/distro/ubuntu20.04-server/sgx_linux_x64_sdk_${PSW_VERSION}.bin; \
    chmod +x sgx_linux_x64_sdk_${PSW_VERSION}.bin; \
    echo 'yes' | ./sgx_linux_x64_sdk_${PSW_VERSION}.bin

# Installing DCAP sdk libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    libsgx-urts=${PSW_VERSION}-focal1 \
    libsgx-qe3-logic=${DCAP_VERSION} \
    libsgx-pce-logic=${DCAP_VERSION} \
    libsgx-dcap-ql=${DCAP_VERSION} \
    libsgx-dcap-ql-dev=${DCAP_VERSION} \
    libsgx-dcap-default-qpl=${DCAP_VERSION} \
	libsgx-quote-ex=${PSW_VERSION}-focal1 \
    libcurl4-openssl-dev

WORKDIR /app

# Copy the project files and directories to the container image
COPY pom.xml .

# This first build is to avoid all packages getting freshly installed
# whenever there is a change in src files
RUN mvn -X -e clean compile install package

# Copy .env code
COPY .env .env

# Copy sgx_sample_app scipt
COPY sgx_sample_app.sh sgx_sample_app.sh

# Copy src code
COPY src src

# Build the application
RUN mvn -X -e clean compile install package
